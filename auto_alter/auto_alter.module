<?php

/**
 * @file
 * Contains auto_alter.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;


/**
 * Implements hook_modules_installed().
 */
function auto_alter_modules_installed($modules) {
  return;
}

// make the API call here to get the text
function generate_alt_text($fileID , $prevAltText = null, $feedBack = null) {
  if (empty($fileID) || !is_numeric($fileID)) {
    return 'Invalid file ID';
  }

  // Load the file entity.
  $file = \Drupal::entityTypeManager()->getStorage('file')->load($fileID);

  if ($file) {
    $uri = $file->getFileUri();
    $file_path = \Drupal::service('file_system')->realpath($uri); 
    
    // here we can call the encode and make the api call.
    $encodedImage = encodeImageToDataURL($file_path);
    $alt_text = generateAltText($encodedImage, $prevAltText, $feedBack);
    
    
    return $alt_text;
  }
   
}

/**
 * Generates alt text for an image using OpenAI's GPT model.
 * 
 * @param string $imageUrl The URL of the image for which to generate alt text.
 * @return array An array of alt text options.
 */
function generateAltText($imageUrl, $prevAltText = null, $feedBack = null) {
  // Load configuration settings.
  $config = \Drupal::config('auto_alter.settings');

  // Get the service selection (OpenAI or Azure OpenAI).
  $service = $config->get('service_selection');

  // Build the prompt.
  $prompt = $service === 'openai' 
    ? $config->get('openai_prompt') 
    : $config->get('azure_prompt');
  
  if ($prevAltText) {
    $prompt .= "Previous alt text: $prevAltText\n";
  }
  
  if ($feedBack) {
    $prompt .= "Feedback: $feedBack\n";
  }

  $model = 'gpt-4o';
  $client = null;
  // Switch between OpenAI and Azure OpenAI based on configuration.
  if ($service === 'openai') {
    $api_key = $config->get('openai_api_key');
    $client = OpenAI::client($api_key);
  }
  elseif ($service === 'azure_openai') {
    $api_key = $config->get('azure_api_key');
    $endpoint = $config->get('azure_api_base');  // Example endpoint for Azure OpenAI
    $api_version = $config->get('azure_api_version');
    $organization = $config->get('azure_organization');
    $client = OpenAI::factory()
    ->withBaseUri($endpoint . '/openai/deployments/' . $model)
    ->withHttpHeader('api-key', $api_key)
    ->withQueryParam('api-version', $api_version)
    ->withOrganization($organization)
    ->make();
  }
  else {
    return ['Invalid service selected'];
  }

  // Make the API request.
  try {
    $result = $client->chat()->create([
      'model' => $model,
      'messages' => [
          ['role' => 'system', 
          'content' => [
              ['type' => 'text',
              'text' => $prompt],
          ]
          ],
          ['role' => 'user', 
          'content' => [
              ['type' => 'image_url',
              'image_url' => ['url' => $imageUrl]],
          ]
          ]
      ],
      'max_tokens' => 500,
      'n' => 1,
      'temperature' => 0.3
    ]);

    $messagge = [];
    for ($i = 0; $i < count($result->choices); $i++) {
        $messagge[] = $result->choices[$i]->message->content;
    }
    return $messagge;
  }
  catch (Exception $e) {
    return ['Error generating alt text: ' . $e->getMessage()];
  }
}

/**
 * Implements hook_form_alter().
 */
function auto_alter_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['#entity_builders'])) {
    $entity = $form_state->getFormObject()->getEntity();
    $entity_manager = \Drupal::service('entity_field.manager');

    if (!($entity instanceof FieldableEntityInterface)) {
      return;
    }

    foreach ($entity_manager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle()) as $field_name => $field_definition) {
      if (!empty($field_definition->getTargetBundle()) && $field_definition->getType() == 'image') {
        $images = $entity->get($field_name);
        foreach ($images as $key => $image) {
          // Ensure we only set alt text if it's not already set.
          if (isset($form[$field_name]['widget'][$key]['#alt_field']) && empty($form[$field_name]['widget'][$key]['#default_value']['alt'])) {
            $form[$field_name]['widget'][$key]['#default_value']['alt'] = generate_alt_text($form[$field_name]['widget'][$key]['#default_value']['fids'][0]);
          }
        }

        // Feedback Field
        $form[$field_name]['widget'][0]['feedback_field'] = [
          '#type' => 'textfield',
          '#title' => t('Feedback'),
          '#default_value' => '',
          '#size' => 60,
          '#maxlength' => 128,
          '#parents' => ['field_image', 0, 'feedback_field'], 
          '#attributes' => [
            'name' => 'field_image[0][feedback_field]',
          ],
        ];

        // New Alt Text Field
        $form[$field_name]['widget'][0]['new_alt_text'] = [
          '#type' => 'textfield',
          '#title' => t('New Alt Text'),
          '#default_value' => '',
          '#size' => 60,
          '#maxlength' => 128,
          '#attributes' => [
            'name' => 'field_image[0][new_alt_text]',
          ],
        ];

        // Regenerate Button
        $form[$field_name]['widget'][0]['buttons_container']['regenerate_button'] = [
          '#type' => 'button',
          '#value' => t('Regenerate'),
          '#ajax' => [
            'callback' => 'auto_alter_regenerate_callback',
            'event' => 'click',
            'wrapper' => 'new-alt-text',
            'progress' => ['type' => 'throbber'],
          ],
        ];

        // Commit Button
        $form[$field_name]['widget'][0]['buttons_container']['commit_button'] = [
          '#type' => 'button',
          '#value' => t('Commit'),
          '#attributes' => [
            'onclick' => 'commitAltText(event);',
          ],
        ];

        // JavaScript code for commit button
        $form['#attached']['html_head'][] = [
          [
            '#type' => 'html_tag',
            '#tag' => 'script',
            '#value' => '
              function commitAltText(event) {
                event.preventDefault();
                const newAltText = document.querySelector("[name=\'field_image[0][new_alt_text]\']").value;
                try {
                  document.querySelector("[name=\'field_media_image[0][alt]\']").value = newAltText;
                  document.querySelector("[name=\'field_media_image[0][alt]\']").focus();
                } catch (error) {
                  document.querySelector("[name=\'field_image[0][alt]\']").value = newAltText;
                  document.querySelector("[name=\'field_image[0][alt]\']").focus();
                }
              }
            ',
          ],
          'auto_alter_custom_js',
        ];
      }
    }
  }
}

/**
 * AJAX callback for regenerating the alt text (now set to the file path).
 */
function auto_alter_regenerate_callback(array &$form, FormStateInterface $form_state) {
  $new_alt_text = 'No file found';  // Default fallback message.
  $entity = $form_state->getFormObject()->getEntity();
  $entity_manager = \Drupal::service('entity_field.manager');

  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }

  // Iterate through all fields to find the image field.
  foreach ($entity_manager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle()) as $field_name => $field_definition) {
    if (!empty($field_definition->getTargetBundle()) && $field_definition->getType() == 'image') {
      $images = $entity->get($field_name);
      // log the form_state
      \Drupal::logger('auto_alter')->notice('<pre>' . print_r($form_state->getValues(), TRUE) . '</pre>');
      // Loop through all images in the field.
      foreach ($images as $key => $image) {
        // Check if there's a valid file ID in the 'fids' array.
        if (isset($form[$field_name]['widget'][$key]['#default_value']['fids'][0])) {
          $fid = $form[$field_name]['widget'][$key]['#default_value']['fids'][0];
          $alt_text =  $form_state->getValue(['field_media_image', 0, 'alt']);
          $feedback = $form_state->getValue(['field_image', 0, 'feedback_field']);

          $new_alt_text = generate_alt_text($fid, $alt_text, $feedback);
        }
      }
    }
  }

  // Return an Ajax response to update the "New Alt Text" field with the file URL or path.
  $response = new AjaxResponse();
  $response->addCommand(new InvokeCommand('[name="field_image[0][new_alt_text]"]', 'val', [$new_alt_text]));

  return $response;
}

function encodeImageToDataURL($imagePath) {
  $absolutePath = realpath($imagePath);

  if ($absolutePath && file_exists($absolutePath)) {
    // Get the MIME type of the file.
    $fileMimeType = mime_content_type($absolutePath);

    // Get the image data.
    $imageData = file_get_contents($absolutePath);

    if ($imageData !== false) {
      // Base64 encode the image data.
      $base64EncodedImage = base64_encode($imageData);

      return "data:" . $fileMimeType . ";base64," . $base64EncodedImage;
    } else {
      error_log('Error: Could not read image data from path: ' . $absolutePath);
      return 'Error: Could not read image data.';
    }
  } else {
    error_log('Error: Image file not found at path: ' . $imagePath);
    return 'Error: File not found.';
  }
}