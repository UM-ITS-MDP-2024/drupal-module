<?php

/**
 * @file
 * Contains auto_alter.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;


/**
 * Implements hook_modules_installed().
 */
function auto_alter_modules_installed($modules) {
  return;
}

function generate_alt_text($image) {
  return 'temp';
}

/**
 * Implements hook_form_alter().
 */
function auto_alter_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['#entity_builders'])) {
    $entity = $form_state->getFormObject()->getEntity();
    $entity_manager = \Drupal::service('entity_field.manager');

    if (!($entity instanceof FieldableEntityInterface)) {
      return;
    }

    foreach ($entity_manager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle()) as $field_name => $field_definition) {
      if (!empty($field_definition->getTargetBundle()) && $field_definition->getType() == 'image') {
        $images = $entity->get($field_name);
        foreach ($images as $key => $image) {
          // Ensure we only set alt text if it's not already set.
          if (isset($form[$field_name]['widget'][$key]['#alt_field']) && empty($form[$field_name]['widget'][$key]['#default_value']['alt'])) {
            $form[$field_name]['widget'][$key]['#default_value']['alt'] = generate_alt_text($image);
          }
        }

        // Feedback Field
        $form[$field_name]['widget'][0]['feedback_field'] = [
          '#type' => 'textfield',
          '#title' => t('Feedback'),
          '#default_value' => '',
          '#size' => 60,
          '#maxlength' => 128,
          '#attributes' => [
            'name' => 'field_image[0][feedback_field]',
          ],
        ];

        // New Alt Text Field
        $form[$field_name]['widget'][0]['new_alt_text'] = [
          '#type' => 'textfield',
          '#title' => t('New Alt Text'),
          '#default_value' => '',
          '#size' => 60,
          '#maxlength' => 128,
          '#attributes' => [
            'name' => 'field_image[0][new_alt_text]',
          ],
        ];

        // Regenerate Button
        $form[$field_name]['widget'][0]['buttons_container']['regenerate_button'] = [
          '#type' => 'button',
          '#value' => t('Regenerate'),
          '#ajax' => [
            'callback' => 'auto_alter_regenerate_callback',
            'event' => 'click',
            'wrapper' => 'new-alt-text',
            'progress' => ['type' => 'throbber'],
          ],
        ];

        // Commit Button
        $form[$field_name]['widget'][0]['buttons_container']['commit_button'] = [
          '#type' => 'button',
          '#value' => t('Commit'),
          '#attributes' => [
            'onclick' => 'commitAltText(event);',
          ],
        ];

        // JavaScript code for commit button
        $form['#attached']['html_head'][] = [
          [
            '#type' => 'html_tag',
            '#tag' => 'script',
            '#value' => '
              function commitAltText(event) {
                event.preventDefault();
                const newAltText = document.querySelector("[name=\'field_image[0][new_alt_text]\']").value;
                document.querySelector("[data-drupal-selector=\'edit-field-media-image-0-alt\']").value = newAltText;
                document.querySelector("[data-drupal-selector=\'edit-field-media-image-0-alt\']").focus();
              }
            ',
          ],
          'auto_alter_custom_js',
        ];
      }
    }
  }
}

/**
 * AJAX callback for regenerating the alt text.
 */
function auto_alter_regenerate_callback(array &$form, FormStateInterface $form_state) {
  $new_alt_text = 'Generated Alt Text: ' . rand(1000, 9999);

  $response = new AjaxResponse();

  $response->addCommand(new InvokeCommand('[name="field_image[0][new_alt_text]"]', 'val', [$new_alt_text]));

  return $response;
}
